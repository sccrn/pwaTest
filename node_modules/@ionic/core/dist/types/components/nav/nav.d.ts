import '../../stencil.core';
import { EventEmitter } from '../../stencil.core';
import { NavComponent, NavOptions, TransitionDoneFn } from './nav-util';
import { ViewController } from './view-controller';
import { ComponentProps, Config, DomController, FrameworkDelegate, NavOutlet } from '../..';
import { RouteID, RouteWrite } from '../router/utils/interfaces';
export declare class Nav implements NavOutlet {
    private init;
    private queue;
    private sbTrns;
    private useRouter;
    private isTransitioning;
    private destroyed;
    private views;
    mode: string;
    el: HTMLElement;
    dom: DomController;
    config: Config;
    animationCtrl: HTMLIonAnimationControllerElement;
    swipeBackEnabled: boolean;
    animated: boolean;
    delegate: FrameworkDelegate | undefined;
    rootParams: ComponentProps | undefined;
    root: NavComponent | undefined;
    rootChanged(): void;
    ionNavWillChange: EventEmitter<void>;
    ionNavDidChange: EventEmitter<void>;
    componentWillLoad(): void;
    componentDidLoad(): void;
    componentDidUnload(): void;
    push(component: NavComponent, componentProps?: ComponentProps, opts?: NavOptions, done?: TransitionDoneFn): Promise<boolean>;
    insert(insertIndex: number, component: NavComponent, componentProps?: ComponentProps, opts?: NavOptions, done?: TransitionDoneFn): Promise<boolean>;
    insertPages(insertIndex: number, insertComponents: NavComponent[], opts?: NavOptions, done?: TransitionDoneFn): Promise<boolean>;
    pop(opts?: NavOptions, done?: TransitionDoneFn): Promise<boolean>;
    popTo(indexOrViewCtrl: number | ViewController, opts?: NavOptions, done?: TransitionDoneFn): Promise<boolean>;
    popToRoot(opts?: NavOptions, done?: TransitionDoneFn): Promise<boolean>;
    removeIndex(startIndex: number, removeCount?: number, opts?: NavOptions, done?: TransitionDoneFn): Promise<boolean>;
    setRoot(component: NavComponent, componentProps?: ComponentProps, opts?: NavOptions, done?: TransitionDoneFn): Promise<boolean>;
    setPages(views: any[], opts?: NavOptions, done?: TransitionDoneFn): Promise<boolean>;
    setRouteId(id: string, params: any, direction: number): Promise<RouteWrite>;
    getRouteId(): RouteID | undefined;
    canGoBack(view?: ViewController): boolean;
    getActive(): ViewController | undefined;
    getByIndex(index: number): ViewController | undefined;
    getPrevious(view?: ViewController): ViewController | undefined;
    length(): number;
    private queueTrns(ti, done);
    private success(result, ti);
    private failed(rejectReason, ti);
    private fireError(rejectReason, ti);
    private nextTrns();
    private runTransition(ti);
    private prepareTI(ti);
    private getEnteringView(ti, leavingView);
    private postViewInit(enteringView, leavingView, ti);
    private transition(enteringView, leavingView, ti);
    private transitionFinish(transition, enteringView, leavingView, opts);
    private getAnimationBuilder(opts);
    private insertViewAt(view, index);
    private removeView(view);
    private destroyView(view);
    /**
     * DOM WRITE
     */
    private cleanup(activeView);
    private swipeBackStart();
    private swipeBackProgress(detail);
    private swipeBackEnd(detail);
    private canSwipeBack();
    render(): JSX.Element[];
}
