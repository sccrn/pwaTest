export let MyCustomEvent = CustomEvent;
export function transition(opts) {
    beforeTransition(opts);
    return (opts.enteringEl && opts.leavingEl && (opts.animationBuilder || opts.animation))
        ? animation(opts)
        : noAnimation(opts); // fast path for no animation
}
function beforeTransition(opts) {
    const enteringEl = opts.enteringEl;
    const leavingEl = opts.leavingEl;
    setZIndex(enteringEl, leavingEl, opts.direction);
    if (enteringEl) {
        if (opts.showGoBack) {
            enteringEl.classList.add('can-go-back');
        }
        else {
            enteringEl.classList.remove('can-go-back');
        }
        enteringEl.hidden = false;
    }
    if (leavingEl) {
        leavingEl.hidden = false;
    }
}
async function animation(opts) {
    await waitForReady(opts, true);
    const transition = await createTransition(opts);
    fireWillEvents(opts.enteringEl, opts.leavingEl);
    await playTransition(transition, opts);
    if (transition.hasCompleted) {
        fireDidEvents(opts.enteringEl, opts.leavingEl);
    }
    return transition;
}
async function noAnimation(opts) {
    const enteringEl = opts.enteringEl;
    const leavingEl = opts.leavingEl;
    enteringEl && enteringEl.classList.remove('hide-page');
    leavingEl && leavingEl.classList.remove('hide-page');
    await waitForReady(opts, false);
    fireWillEvents(enteringEl, leavingEl);
    fireDidEvents(enteringEl, leavingEl);
    return undefined;
}
async function waitForReady(opts, defaultDeep) {
    const deep = opts.deepWait != null ? opts.deepWait : defaultDeep;
    const promises = deep ? [
        deepReady(opts.enteringEl),
        deepReady(opts.leavingEl)
    ] : [
        shallowReady(opts.enteringEl),
        shallowReady(opts.leavingEl)
    ];
    await Promise.all(promises);
    await notifyViewReady(opts.viewIsReady, opts.enteringEl);
}
async function notifyViewReady(viewIsReady, enteringEl) {
    if (viewIsReady) {
        await viewIsReady(enteringEl);
    }
}
function createTransition(opts) {
    if (opts.animation) {
        return opts.animation;
    }
    return opts.animationCtrl.create(opts.animationBuilder, opts.baseEl, opts);
}
function playTransition(transition, opts) {
    const progressAnimation = opts.progressAnimation;
    const promise = new Promise(resolve => transition.onFinish(resolve));
    // cool, let's do this, start the transition
    if (progressAnimation) {
        // this is a swipe to go back, just get the transition progress ready
        // kick off the swipe animation start
        transition.progressStart();
        progressAnimation(transition);
    }
    else {
        // only the top level transition should actually start "play"
        // kick it off and let it play through
        // ******** DOM WRITE ****************
        transition.play();
    }
    // create a callback for when the animation is done
    return promise;
}
function fireWillEvents(enteringEl, leavingEl) {
    lifecycle(leavingEl, "ionViewWillLeave" /* WillLeave */);
    lifecycle(enteringEl, "ionViewWillEnter" /* WillEnter */);
}
function fireDidEvents(enteringEl, leavingEl) {
    lifecycle(enteringEl, "ionViewDidEnter" /* DidEnter */);
    lifecycle(leavingEl, "ionViewDidLeave" /* DidLeave */);
}
export function lifecycle(el, lifecycle) {
    if (el) {
        const event = new MyCustomEvent(lifecycle, {
            bubbles: false,
            cancelable: false
        });
        el.dispatchEvent(event);
    }
}
export function mockLifecycle(fn) {
    MyCustomEvent = fn;
}
function shallowReady(el) {
    if (el && el.componentOnReady) {
        return el.componentOnReady();
    }
    return Promise.resolve();
}
function deepReady(el) {
    if (!el) {
        return Promise.resolve();
    }
    if (customElements.get) {
        if (customElements.get(el.tagName.toLowerCase())) {
            return componentOnReady(el);
        }
        else {
            return Promise.all(Array.from(el.children).map(deepReady));
        }
    }
    return componentOnReady(el);
}
function componentOnReady(el) {
    if (el.componentOnReady) {
        return el.componentOnReady();
    }
    else {
        return Promise.all(Array.from(el.children).map(deepReady));
    }
}
function setZIndex(enteringEl, leavingEl, direction) {
    if (enteringEl) {
        enteringEl.style.zIndex = (direction === "back" /* Back */)
            ? '99'
            : '101';
    }
    if (leavingEl) {
        leavingEl.style.zIndex = '100';
    }
}
