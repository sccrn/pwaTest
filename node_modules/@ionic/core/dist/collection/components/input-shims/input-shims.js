import enableHideCaretOnScroll from './hacks/hide-caret';
import enableInputBlurring from './hacks/input-blurring';
import enableScrollAssist from './hacks/scroll-assist';
import enableScrollPadding from './hacks/scroll-padding';
const INPUT_BLURRING = true;
const SCROLL_ASSIST = true;
const SCROLL_PADDING = true;
const HIDE_CARET = true;
export class InputShims {
    constructor() {
        this.didLoad = false;
        this.hideCaret = false;
        this.scrollAssist = false;
        this.keyboardHeight = 0;
        this.hideCaretMap = new WeakMap();
        this.scrollAssistMap = new WeakMap();
    }
    componentDidLoad() {
        this.keyboardHeight = this.config.getNumber('keyboardHeight', 290);
        this.scrollAssist = this.config.getBoolean('scrollAssist', true);
        this.hideCaret = this.config.getBoolean('hideCaretOnScroll', true);
        const inputBlurring = this.config.getBoolean('inputBlurring', true);
        if (inputBlurring && INPUT_BLURRING) {
            enableInputBlurring();
        }
        const scrollPadding = this.config.getBoolean('scrollPadding', true);
        if (scrollPadding && SCROLL_PADDING) {
            enableScrollPadding(this.keyboardHeight);
        }
        // Input might be already loaded in the DOM before ion-device-hacks did.
        // At this point we need to look for all the ion-inputs not registered yet
        // and register them.
        const inputs = Array.from(document.querySelectorAll('ion-input'));
        for (const input of inputs) {
            this.registerInput(input);
        }
        this.didLoad = true;
    }
    onInputDidLoad(event) {
        if (this.didLoad) {
            this.registerInput(event.detail);
        }
    }
    onInputDidUnload(event) {
        if (this.didLoad) {
            this.unregisterInput(event.detail);
        }
    }
    registerInput(componentEl) {
        const inputEl = componentEl.querySelector('input');
        const scrollEl = componentEl.closest('ion-scroll');
        const contentEl = componentEl.closest('ion-content');
        if (HIDE_CARET && this.hideCaret && !this.hideCaretMap.has(componentEl)) {
            const rmFn = enableHideCaretOnScroll(componentEl, inputEl, scrollEl);
            this.hideCaretMap.set(componentEl, rmFn);
        }
        if (SCROLL_ASSIST && this.scrollAssist && !this.scrollAssistMap.has(componentEl)) {
            const rmFn = enableScrollAssist(componentEl, inputEl, contentEl, this.keyboardHeight);
            this.scrollAssistMap.set(componentEl, rmFn);
        }
    }
    unregisterInput(componentEl) {
        if (HIDE_CARET && this.hideCaret) {
            const fn = this.hideCaretMap.get(componentEl);
            fn && fn();
            this.hideCaretMap.delete(componentEl);
        }
        if (SCROLL_ASSIST && this.scrollAssist) {
            const fn = this.scrollAssistMap.get(componentEl);
            fn && fn();
            this.scrollAssistMap.delete(componentEl);
        }
    }
    static get is() { return "ion-input-shims"; }
    static get properties() { return { "config": { "context": "config" } }; }
}
