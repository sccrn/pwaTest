import { createThemedClasses, getElementClassMap } from '../../utils/theme';
let ids = 0;
export class SegmentButton {
    constructor() {
        this.activated = false;
        /**
         * If true, the segment button is selected. Defaults to `false`.
         */
        this.checked = false;
        /*
         * If true, the user cannot interact with the segment button. Default false.
         */
        this.disabled = false;
    }
    componentWillLoad() {
        if (!this.value) {
            this.value = `ion-sb-${ids++}`;
        }
    }
    /**
     * Emit the click event to the parent segment
     */
    segmentButtonClick() {
        clearTimeout(this.styleTmr);
        this.styleTmr = setTimeout(() => {
            this.ionClick.emit();
        });
    }
    render() {
        const themedClasses = createThemedClasses(this.mode, this.color, 'segment-button');
        const hostClasses = getElementClassMap(this.el.classList);
        const buttonClasses = Object.assign({ 'segment-button-disabled': this.disabled, 'segment-activated': this.activated }, themedClasses, hostClasses);
        const TagType = this.href ? 'a' : 'button';
        const attrs = (TagType === 'button')
            ? { type: 'button' }
            : {};
        return [
            h(TagType, Object.assign({}, attrs, { "aria-pressed": this.activated, class: buttonClasses, disabled: this.disabled, href: this.href, onClick: this.segmentButtonClick.bind(this) }),
                h("slot", null),
                this.mode === 'md' && h("ion-ripple-effect", { tapClick: true }))
        ];
    }
    static get is() { return "ion-segment-button"; }
    static get properties() { return { "activated": { "type": Boolean, "attr": "activated", "mutable": true }, "checked": { "type": Boolean, "attr": "checked" }, "color": { "type": String, "attr": "color" }, "disabled": { "type": Boolean, "attr": "disabled" }, "el": { "elementRef": true }, "href": { "type": String, "attr": "href" }, "mode": { "type": "Any", "attr": "mode" }, "value": { "type": String, "attr": "value", "mutable": true } }; }
    static get events() { return [{ "name": "ionClick", "method": "ionClick", "bubbles": true, "cancelable": true, "composed": true }]; }
    static get style() { return "/**style-placeholder:ion-segment-button:**/"; }
    static get styleMode() { return "/**style-id-placeholder:ion-segment-button:**/"; }
}
