import { openURL } from '../../utils/theme';
export class BackButton {
    onClick(ev) {
        const nav = this.el.closest('ion-nav');
        if (nav && nav.canGoBack()) {
            ev.preventDefault();
            nav.pop();
        }
        else if (this.defaultHref) {
            openURL(this.defaultHref, ev, true);
        }
    }
    hostData() {
        return {
            class: {
                'show-back-button': !!this.defaultHref
            }
        };
    }
    render() {
        const backButtonIcon = this.icon || this.config.get('backButtonIcon', 'arrow-back');
        const backButtonText = this.text != null ? this.text : this.config.get('backButtonText', 'Back');
        return (h("button", { class: 'back-button-inner', onClick: (ev) => this.onClick(ev) },
            backButtonIcon && h("ion-icon", { name: backButtonIcon }),
            this.mode === 'ios' && backButtonText && h("span", { class: 'button-text' }, backButtonText),
            this.mode === 'md' && h("ion-ripple-effect", { tapClick: true })));
    }
    static get is() { return "ion-back-button"; }
    static get host() { return { "theme": "back-button" }; }
    static get properties() { return { "config": { "context": "config" }, "defaultHref": { "type": String, "attr": "default-href" }, "el": { "elementRef": true }, "icon": { "type": String, "attr": "icon" }, "mode": { "type": "Any", "attr": "mode" }, "text": { "type": "Any", "attr": "text" } }; }
    static get style() { return "/**style-placeholder:ion-back-button:**/"; }
    static get styleMode() { return "/**style-id-placeholder:ion-back-button:**/"; }
}
